<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/jee
                           http://www.springframework.org/schema/jee/spring-jee.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/task
                           http://www.springframework.org/schema/task/spring-task.xsd
                           http://www.springframework.org/schema/cache
                           http://www.springframework.org/schema/cache/spring-cache.xsd">
    <bean id="placeholderConfig"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:zookeeper.properties</value>
                <value>classpath:mysql.properties</value>
                <value>classpath:solr.properties</value>
                <value>classpath:search_config.properties</value>
                <value>classpath*:es.properties</value>
                <value>classpath*:redis.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>

    <jee:jndi-lookup jndi-name="mysql/address" id="mysql.address" expected-type="java.lang.String"/>
    <jee:jndi-lookup jndi-name="mysql/username" id="mysql.username" expected-type="java.lang.String"/>
    <jee:jndi-lookup jndi-name="mysql/password" id="mysql.password" expected-type="java.lang.String"/>
    <bean id="dbDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" ref="mysql.address"/>
        <property name="username" ref="mysql.username"/>
        <property name="password" ref="mysql.password"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${mysql.initialSize}"/>
        <property name="minIdle" value="${mysql.minIdle}"/>
        <property name="maxActive" value="${mysql.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dbDataSource"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wfj.search.online.web.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dbDataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="clusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <constructor-arg name="propertySource">
            <bean class="org.springframework.core.env.MapPropertySource">
                <constructor-arg name="name" value="redis.properties"/>
                <constructor-arg name="source">
                    <map>
                        <entry key="spring.redis.cluster.nodes" value="${spring.redis.cluster.nodes}"/>
                        <entry key="spring.redis.cluster.max-redirects" value="${spring.redis.cluster.max-redirects}"/>
                    </map>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory">
        <constructor-arg name="clusterConfig" ref="clusterConfig"/>
        <property name="password" value="${spring.redis.cluster.password}"/>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <constructor-arg name="connectionFactory" ref="connectionFactory"/>
    </bean>
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <property name="cachePrefix">
            <bean class="org.springframework.data.redis.cache.DefaultRedisCachePrefix">
                <constructor-arg name="delimiter" value="~"/>
            </bean>
        </property>
        <property name="defaultExpiration" value="180"/>
        <property name="expires">
            <map>
                <!-- url code 缓存 30天 -->
                <entry key="WFJ_ONLINE_URL_CODE" value="2592000000" value-type="java.lang.Long"/>
                <!-- 评论缓存10分钟 -->
                <entry key="WFJ_ONLINE_WEB_SEARCH_COMMENT" value="600" value-type="java.lang.Long"/>
                <!-- 新品速递最近时间缓存10分钟 -->
                <entry key="WFJ_ONLINE_WEB_SEARCH_NEW_PRODUCT_DATE_FROM" value="600" value-type="java.lang.Long"/>
            </map>
        </property>
        <property name="loadRemoteCachesOnStartup" value="true"/>
        <property name="usePrefix" value="true"/>
    </bean>
    <bean id="stringRedisKeyGenerator" class="com.wfj.platform.util.cache.SimpleParamStringKeyGenerator"/>
    <cache:annotation-driven key-generator="stringRedisKeyGenerator" cache-manager="cacheManager"/>

    <jee:jndi-lookup jndi-name="service/address" id="instanceAddress" expected-type="java.lang.String"/>
    <jee:jndi-lookup jndi-name="service/instance" id="instanceName" expected-type="java.lang.String"/>
    <bean id="registerClientFactory" class="com.wfj.platform.util.zookeeper.ZookeeperClientFactory">
        <property name="zkAddresses" value="${monitor.zkAddresses}"/>
    </bean>
    <bean id="registerClient" factory-bean="registerClientFactory"
          factory-method="createClient" destroy-method="close"/>
    <bean id="statusProvider"
          class="com.wfj.platform.util.zookeeper.monitor.register.CommonInstanceStatusProvider"/>
    <bean id="appInstanceRegister"
          class="com.wfj.platform.util.zookeeper.monitor.register.AppInstanceRegister">
        <constructor-arg name="client" ref="registerClient"/>
        <property name="appName" value="${monitor.register.appName}"/>
        <property name="instanceName" ref="instanceName"/>
        <property name="namespace" value="${monitor.register.namespace}"/>
        <property name="statusProvider" ref="statusProvider"/>
    </bean>
    <bean id="instanceStatusUpdateRegisterJob"
          class="com.wfj.platform.util.zookeeper.monitor.register.InstanceStatusUpdateRegisterJobDescription">
        <property name="appInstanceRegister" ref="appInstanceRegister"/>
    </bean>
    <bean id="serviceDiscoveryRegisterJob"
          class="com.wfj.platform.util.zookeeper.discovery.SpringMvcServiceDiscoveryRegisterJobDescription"
          init-method="register" destroy-method="close">
        <property name="instanceAddress" ref="instanceAddress"/>
        <property name="statusProvider" ref="statusProvider"/>
        <property name="basePath" value="${discovery.basePath}"/>
        <property name="client" ref="registerClient"/>
    </bean>
    <bean id="springMvcServiceProvider" class="com.wfj.platform.util.zookeeper.discovery.SpringMvcServiceProvider">
        <property name="basePath" value="${discovery.basePath}"/>
        <property name="client" ref="registerClient"/>
    </bean>

    <bean id="esClient" class="com.wfj.search.utils.es.EsClientFactory">
        <constructor-arg name="transportAddressList" value="${es.transportAddressList}"/>
        <constructor-arg name="clusterName" value="${es.clusterName}"/>
    </bean>
    <bean id="solrClient" class="org.apache.solr.client.solrj.impl.CloudSolrClient" init-method="connect">
        <constructor-arg name="zkHost" value="${solr.zkHost}"/>
        <property name="requestWriter">
            <bean class="org.apache.solr.client.solrj.impl.BinaryRequestWriter"/>
        </property>
        <property name="parser">
            <bean class="org.apache.solr.client.solrj.impl.BinaryResponseParser"/>
        </property>
    </bean>

    <bean id="segmentClientFactory" class="com.wfj.platform.util.zookeeper.ZookeeperClientFactory">
        <property name="zkAddresses" value="${solr.zkHost}"/>
    </bean>
    <bean id="segmentClient" factory-bean="segmentClientFactory"
          factory-method="createClient" destroy-method="close"/>
    <bean id="segmentKeeper" class="com.wfj.search.segment.util.SegmenterKeeper">
        <constructor-arg name="client" ref="segmentClient"/>
        <constructor-arg name="dictPath" value="${segment.dictPath}"/>
    </bean>
    <bean id="segmentService" class="com.wfj.search.segment.SegmentService" init-method="keeps">
        <property name="dictNames" value="attribute.txt,brand.txt,category.txt"/>
        <property name="segmenterKeeper" ref="segmentKeeper"/>
    </bean>

    <bean id="urlHandler" class="com.wfj.search.online.web.handler.UrlHandlerWrapper">
        <property name="handlers">
            <list>
                <bean class="com.wfj.search.online.web.handler.AvailableBrandUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailableRangeUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailableTagUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailableStandardUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailableColorUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailablePropertyUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailableCategoryUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailableSortUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AvailablePaginationUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SelectedCategoryUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SelectedBrandUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SelectedRangeUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SelectedStandardUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SelectedColorUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SelectedPropertyUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SelectedTagUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.AllClearUrlHandler"/>
                <bean class="com.wfj.search.online.web.handler.SpuUrlHandler"/>
            </list>
        </property>
    </bean>

    <context:component-scan base-package="com.wfj.search.online.web" use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <task:scheduler id="scheduler" pool-size="10"/>
    <task:scheduled-tasks scheduler="scheduler">
        <task:scheduled ref="instanceStatusUpdateRegisterJob" method="work" initial-delay="1000" fixed-delay="30000"/>
        <task:scheduled ref="serviceDiscoveryRegisterJob" method="freshRegister" initial-delay="4000"
                        fixed-delay="30000"/>
    </task:scheduled-tasks>

    <bean id="springDataSourceBeanPostProcessor"
          class="com.wfj.netty.servlet.handler.spring.SpringDataSourceBeanPostProcessor"/>
    <bean id="wrappedDataSource" class="com.wfj.netty.servlet.handler.factory.SpringDataSourceFactoryBean">
        <property name="targetName" value="dbDataSource"/>
    </bean>
</beans>