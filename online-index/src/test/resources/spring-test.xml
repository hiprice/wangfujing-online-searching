<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/jee
                           http://www.springframework.org/schema/jee/spring-jee.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/cache
                           http://www.springframework.org/schema/cache/spring-cache.xsd">
    <bean id="placeholderConfig"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:zookeeper.properties</value>
                <value>classpath:mysql.properties</value>
                <value>classpath:solr-test.properties</value>
                <value>classpath:pcm.properties</value>
                <value>classpath:index_config.properties</value>
                <value>classpath:comment.properties</value>
                <value>classpath:edismax.properties</value>
                <value>classpath:es.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>

    <bean id="dbDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${mysql.address}"/>
        <property name="username" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${mysql.initialSize}"/>
        <property name="minIdle" value="${mysql.minIdle}"/>
        <property name="maxActive" value="${mysql.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dbDataSource"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wfj.search.online.index.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wfj.platform.operation.record.common.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dbDataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="clusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <constructor-arg name="propertySource">
            <bean class="org.springframework.core.env.MapPropertySource">
                <constructor-arg name="name" value="redis.properties"/>
                <constructor-arg name="source">
                    <map>
                        <entry key="spring.redis.cluster.nodes" value="${spring.redis.cluster.nodes}"/>
                        <entry key="spring.redis.cluster.max-redirects" value="${spring.redis.cluster.max-redirects}"/>
                    </map>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory">
        <constructor-arg name="clusterConfig" ref="clusterConfig"/>
        <property name="password" value="${spring.redis.cluster.password}"/>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <constructor-arg name="connectionFactory" ref="connectionFactory"/>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
    </bean>
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <property name="defaultExpiration" value="180"/>
        <property name="expires">
            <map key-type="java.lang.String" value-type="java.lang.Long">
                <!-- 黑名单缓存24小时 -->
                <entry key="WFJ_ONLINE_INDEX_BLACKLIST" value="86400"/>
                <!-- 品牌详细信息缓存24小时 -->
                <entry key="WFJ_SEARCH_ONLINE_PCM_BRAND" value="86400"/>
                <!-- 分类详细信息缓存24小时 -->
                <entry key="WFJ_SEARCH_ONLINE_PCM_CATEGORY" value="86400"/>
                <!-- SKU缓存24小时 -->
                <entry key="WFJ_SEARCH_ONLINE_PCM_SKU" value="86400"/>
                <!-- SPU缓存24小时 -->
                <entry key="WFJ_SEARCH_ONLINE_PCM_SPU" value="86400"/>
            </map>
        </property>
        <property name="loadRemoteCachesOnStartup" value="true"/>
        <property name="usePrefix" value="true"/>
    </bean>
    <bean id="stringRedisKeyGenerator" class="com.wfj.platform.util.cache.SimpleParamStringKeyGenerator"/>
    <cache:annotation-driven key-generator="stringRedisKeyGenerator" cache-manager="cacheManager"/>

    <jee:jndi-lookup jndi-name="service/address" id="instanceAddress" expected-type="java.lang.String"/>
    <jee:jndi-lookup jndi-name="service/instance" id="instanceName" expected-type="java.lang.String"/>
    <bean id="registerClientFactory" class="com.wfj.platform.util.zookeeper.ZookeeperClientFactory">
        <property name="zkAddresses" value="${monitor.zkAddresses}"/>
    </bean>
    <bean id="registerClient" factory-bean="registerClientFactory"
          factory-method="createClient" destroy-method="close" init-method="start"/>
    <bean id="statusProvider"
          class="com.wfj.platform.util.zookeeper.monitor.register.CommonInstanceStatusProvider"/>
    <bean id="appInstanceRegister"
          class="com.wfj.platform.util.zookeeper.monitor.register.AppInstanceRegister">
        <constructor-arg name="client" ref="registerClient"/>
        <property name="appName" value="${monitor.register.appName}"/>
        <property name="instanceName" ref="instanceName"/>
        <property name="namespace" value="${monitor.register.namespace}"/>
        <property name="statusProvider" ref="statusProvider"/>
    </bean>

    <bean id="esClient" class="com.wfj.search.utils.es.EsClientFactory">
        <constructor-arg name="transportAddressList" value="${es.transportAddressList}"/>
        <constructor-arg name="clusterName" value="${es.clusterName}"/>
    </bean>
    <bean id="solrClient" class="org.apache.solr.client.solrj.impl.CloudSolrClient" init-method="connect">
        <constructor-arg name="zkHost" value="${solr.zkHost}"/>
        <property name="requestWriter">
            <bean class="org.apache.solr.client.solrj.impl.BinaryRequestWriter"/>
        </property>
        <property name="parser">
            <bean class="org.apache.solr.client.solrj.impl.BinaryResponseParser"/>
        </property>
    </bean>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 定义切面开始 { -->
    <bean id="elasticSearchRecorder" class="com.wfj.search.util.record.elasticsearch.ElasticSearchRecorder">
        <property name="esClient" ref="esClient"/>
        <property name="index" value="${es.index}"/>
        <property name="sidGenerator">
            <bean class="com.wfj.search.util.record.zookeeper.ZkCounterSidGenerator">
                <property name="versionNoCounterPath" value="${operation.versionNoCounterPath}"/>
                <property name="zkClient" ref="registerClient"/>
            </bean>
        </property>
    </bean>
    <bean id="operationPojoParamRecordAspect" class="com.wfj.search.utils.record.bg.OperationPojoParamRecordAspect">
        <property name="recorder" ref="elasticSearchRecorder"/>
    </bean>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="operationParamOperation"
                      expression="execution(public * com.wfj.search.online.index.operation.IOperation.operate(com.wfj.search.util.record.pojo.Operation))"/>
        <aop:aspect order="4" ref="operationPojoParamRecordAspect">
            <aop:around method="around" pointcut-ref="operationParamOperation"/>
        </aop:aspect>
    </aop:config>
    <!-- } 定义切面结束 -->

    <context:component-scan base-package="com.wfj.search.online.index"/>
</beans>